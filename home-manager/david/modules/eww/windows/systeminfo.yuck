(defvar hover_bat false)
(defvar hover_net false)
(defvar hover_disk false)
(defvar hover_mem false)
(defvar hover_cpu false)
(defvar hover_temp false)
(defpoll interfaceId :interval "60s" "route | grep default | head -n1 | awk '{print $8}'")
(deflisten pkgs `nix-store --query --requisites /run/current-system | wc -l`)
(defwindow systeminfo
  :monitor 0
  :stacking "bg"
  :geometry (geometry
    :anchor "bottom right"
    :x "3%" :y "15%"
  )
  (box :class "systeminfo"
    :orientation "v"
    :spacing 20 :space-evenly true

    (box :class "bat"
      :orientation "h" :halign "end"
      :spacing 5 :space-evenly false
      :active {EWW_BATTERY != ""}
      :visible {EWW_BATTERY != ""}
      (eventbox :onhover "${EWW_CMD} update hover_bat=true" :onhoverlost "${EWW_CMD} update hover_bat=false"
        (circular-progress
          :value {EWW_BATTERY.BAT0.capacity}
          :width 100 :height 100 :thickness 7
          (overlay
            (box :visible {!hover_bat} (icon :glyph {
              ; ls /sys/class/power_supply
              EWW_BATTERY.BAT0.status == 'Charging' ? "" :
              EWW_BATTERY.BAT0.status == 'Not charging' ? "" :
              EWW_BATTERY.BAT0.capacity < 5 ? "" : ; warning
              EWW_BATTERY.BAT0.capacity < 15 ? "" : ; empty
              EWW_BATTERY.BAT0.capacity < 35 ? "" : ; low
              EWW_BATTERY.BAT0.capacity < 65 ? "" : ; medium
              EWW_BATTERY.BAT0.capacity < 85 ? "" : "" ; high | full
            }))
            (centerbox :visible {hover_bat} :orientation "v"
              (label :style "font-size: 0.25em;" :valign "end" :text "BAT")
              (label :style "font-size: 0.35em;" :text "${round(EWW_BATTERY.BAT0.capacity, 0)}%")
              (box :style "font-size: 0.25em;" :valign "start" (icon :glyph {
                EWW_BATTERY.BAT0.status == 'Charging' ? "" :
                EWW_BATTERY.BAT0.status == 'Not charging' ? "" : ""
              }))
            )
          )
        )
      )
    )

    (box :class "net"
      :orientation "h" :halign "end"
      :spacing 5 :space-evenly false
      (box :class "net"
        :orientation "v" :halign "end"
        :spacing 2 :space-evenly false
        (overlay
          (graph
            :width 300 :height 60 :valign "start"
            :thickness 3
            :style "background-color: ${base0A};"
            :value {EWW_NET[interfaceId].NET_UP}
            :time-range "120s"
          )
          (graph
            :width 300 :height 60 :valign "start"
            :thickness 3
            :style "background-color: ${base09};"
            :value {EWW_NET[interfaceId].NET_DOWN}
            :time-range "120s"
          )
        )
        (box
          :orientation "h" :halign "end"
          :spacing 15
          ;:style "font-size: 0.95em;"
          (label :text "${round(EWW_NET[interfaceId].NET_UP / 1000000, 1)}MB/su")
          (label :style "color: ${base09}" :text "${round(EWW_NET[interfaceId].NET_DOWN / 1000000, 1)}MB/sd")
        )
      )
      (eventbox
        :onhover "${EWW_CMD} update hover_net=true" :onhoverlost "${EWW_CMD} update hover_net=false"
        (circular-progress
          :value {EWW_NET[interfaceId].NET_DOWN} :max 1
          :width 100 :height 100 :thickness 7 ; TODO scale automatically
          (overlay
            (box :visible {!hover_net} (icon :glyph ""))
            (centerbox :visible {hover_net} :orientation "v"
              (label :style "font-size: 0.25em;" :valign "end" :text "NET")
              (label :style "font-size: 0.3em;" :text "${interfaceId}")
              (label :style "font-size: 0.25em;" :valign "start" :text "")
            )
          )
        )
      )
    )

    (box :class "disk"
      :orientation "h" :halign "end"
      :spacing 5 :space-evenly false
      (box :class "disk"
        :orientation "h" :valign "end"
        :space-evenly false
        (label :text pkgs)
        (icon :glyph "") ; TODO packages flatpak:
      )
      (eventbox
        :onhover "${EWW_CMD} update hover_disk=true" :onhoverlost "${EWW_CMD} update hover_disk=false"
        (circular-progress
          :value {EWW_DISK["/"].used_perc}
          :width 100 :height 100 :thickness 7
          (overlay
            (box :visible {!hover_disk} (icon :glyph ""))
            (centerbox :visible {hover_disk} :orientation "v"
              (label :style "font-size: 0.25em;" :valign "end" :text "root")
              (label :style "font-size: 0.35em;" :text "${round(EWW_DISK["/"].used / 1000000000, 1)}/" )
              (label :style "font-size: 0.2em;" :valign "start" :text "${round(EWW_DISK["/"].total / 1000000000, 0)} GB")
            )
          )
        )
      )
    )

    (box :class "mem"
      :orientation "h" :halign "end"
      :spacing 5 :space-evenly false
      (eventbox
        :onhover "${EWW_CMD} update hover_mem=true" :onhoverlost "${EWW_CMD} update hover_mem=false"
        (circular-progress
          :value {EWW_RAM.used_mem_perc}
          :width 100 :height 100 :thickness 7
          (overlay
            (box :visible {!hover_mem} (icon :glyph ""))
            (centerbox :visible {hover_mem} :orientation "v"
              (label :style "font-size: 0.25em;" :valign "end" :text "RAM")
              (label :style "font-size: 0.35em;" :text "${round(EWW_RAM.used_mem / 1000000000, 2)}/" )
              (label :style "font-size: 0.25em;" :valign "start" :text "${round(EWW_RAM.total_mem / 1000000000, 0) } GB")
            )
          )
        )
      )
    )
    
    (box :class "cpu"
      :orientation "h" :halign "end"
      :spacing 5 :space-evenly false
      (box :class "cpu"
        :orientation "v" :halign "end"
        :spacing 2 :space-evenly false
        (graph
          :width 300 :height 60 :valign "start"
          :thickness 3
          :value {EWW_CPU.avg}
          :time-range "120s"
        )
      )
      (eventbox
        :onhover "${EWW_CMD} update hover_cpu=true" :onhoverlost "${EWW_CMD} update hover_cpu=false"
        :onclick "btop.desktop" :tooltip "btop"
        (circular-progress
          :value {EWW_CPU.avg}
          :width 100 :height 100 :thickness 7 ; TODO scale automatically
          (overlay
            (box :visible {!hover_cpu} (icon :glyph ""))
            (centerbox :visible {hover_cpu} :orientation "v"
              (label :style "font-size: 0.25em;" :valign "end" :text "CPU")
              (label :style "font-size: 0.35em;" :text "${round(EWW_CPU.avg, 1)}%")
              (box :style "font-size: 0.25em;" :valign "start" (icon :glyph ""))
            )
          )
        )
      )
    )
  )
)
